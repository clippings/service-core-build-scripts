apply plugin: 'org.openapi.generator'

dependencies {
    implementation "org.openapitools:jackson-databind-nullable:${findProperty('jackson_databind_nullable.version') ?: '0.2.3'}"
}

if (project.hasProperty('serverOpenApiFile')) {
    final OPENAPI_FILE = getProperty('serverOpenApiFile')
    final PACKAGE_NAME = findProperty('serverOpenApiPackage') ?: "com.dt.${project.name.replace('-', '.')}"
    final API_ROOT = "${buildDir}/generated/api"

    // generate APIs (interfaces and models only) using the provided openapi.yaml
    openApiGenerate {
        generatorName = "spring"
        skipValidateSpec = false
        inputSpec = projectDir.toString() + '/' + OPENAPI_FILE
        outputDir = API_ROOT
        apiPackage = "${PACKAGE_NAME}.api"
        modelPackage = "${PACKAGE_NAME}.dto"
        configOptions = [
                basePackage                : "${PACKAGE_NAME}",
                interfaceOnly              : "true",
                skipDefaultInterface       : "true",
                // hateoas: "true",
                // useBeanValidation will use the standard API, performBeanValidation will use
                // hibernate validator. So it's better to stick only to the standard.
                // Don't enable bother, otherwise if you use email validation, the generate code
                // will not compile.
                useBeanValidation          : "true",
                prependFormOrBodyParameters: "true",
                generateSupportingFiles    : "false",
                legacyDiscriminatorBehavior: "false",
                // Declare controller operation methods to throw a generic exception(Exception.java)
                // and allow unhandled exceptions (useful to throw checked exceptions and handle
                // them in the generic exception handler)
                unhandledException         : "true",
                // Defines whether primitive types defined at the model/schema level will be
                // wrapped in a model
                generateAliasAsModel       : "false",
                // Whether to use tags for creating interface and controller class names
                // Will split the API interfaces per tag name
                useTags                    : "true",
                // Don't add the OpenAPI/Swagger annotations. We don't need to provide
                //more documentation. The OpenAPI specification is the source of truth.
                //Select the complementary documentation annotation library.
                annotationLibrary          : "none",
                //No OpenAPI documentation provider we already have the documentation
                documentationProvider      : "none",
                delegatePattern            : "false",
                apis                       : "",
                models                     : ""
        ]
    }

    sourceSets.main.java.srcDir files("${buildDir}/generated/api/src/main/java").builtBy('openApiGenerate')
    compileJava.dependsOn tasks.openApiGenerate
}
